name: PR
run-name: ${{ github.actor }} created pull request from ${{ github.head_ref }} to ${{ github.base_ref }} ðŸš©

on:
  pull_request:
    branches:
      - main
      - dev
    types: [opened, reopened]
   
env:
  TF_CLOUD_ORGANIZATION: DACN
  TF_CLOUD_PROJECT: UIT
  branch: ${{ github.base_ref }}
  environment: ${{ github.base_ref == 'main' && 'prod' || 'dev' }}

jobs:
  Get-changedfile:
    name: Find paths trigger event
    defaults:
      run:
        working-directory: koco
    runs-on: ubuntu-latest
    outputs:
      files: ${{ steps.get-files.outputs.files }}
    steps:
      - name: Checkout code
        uses: actions/checkout@v4.1.1
        with:
          fetch-depth: 0

      - name: Get changed files
        id: get-files
        run: |
          echo "files=$(git diff --name-only ${{ github.event.pull_request.base.sha }} ${{ github.sha }} | xargs)" >> $GITHUB_OUTPUT

  # Plan-infrastructure:
  #   name: "Planning for infrastructure implement"
  #   runs-on: ubuntu-latest
  #   permissions:
  #     pull-requests: write
  #   steps:
  #     - name: Checkout
  #       uses: actions/checkout@v4.1.1

  #     - name: Setup Terraform with specified version on the runner
  #       uses: hashicorp/setup-terraform@v3
  #       with:
  #         cli_config_credentials_token: ${{ secrets.TF_API_TOKEN }}
    
  #     - name: Terraform Plan
  #       id: plan
  #       working-directory: "test_infra/"
  #       env:
  #         TF_WORKSPACE: ${{ format('infra-{0}', env.environment) }}
  #         TF_CLI_ARGS: ${{ format('-no-color -var-file=./environments/{0}/terraform.tfvars', env.environment) }}
  #       run: |
  #         terraform init > .nothing
  #         terraform plan > output
  #         url=$(grep '^To view this run in a browser, visit:' -A1 output | grep -v '^To view this run in a browser, visit:' | tr -d '\012\015')
  #         sm=$(grep -E '^(Plan:|No changes.)' output | tr -d '\012\015')
  #         echo "run_link=$url" >> $GITHUB_OUTPUT
  #         echo "summary=$sm" >> $GITHUB_OUTPUT
  #         echo "Run link: $url"
  #         echo "Summary: $sm"
          
  #     - name: Write pull request comment
  #       uses: actions/github-script@v7
  #       with:
  #         github-token: ${{ secrets.GITHUB_TOKEN }}
  #         script: |
  #           const output = `#### Plan for infrastructure implement...
  #           #### Run-link: ${{ steps.plan.outputs.run_link }}
  #           #### Summary: \`${{ steps.plan.outputs.summary }}\``;
  #           github.rest.issues.createComment({
  #           issue_number: context.issue.number,
  #           owner: context.repo.owner,
  #           repo: context.repo.repo,
  #           body: output
  #           })

  # Plan-application:
  #   name: Planing for application deployment
  #   runs-on: ubuntu-latest
  #   permissions:
  #     pull-requests: write
  #   needs: Get-changedfile
  #   env:
  #     TF_CLI_ARGS: -no-color
  #   steps:
  #     - name: Checkout
  #       uses: actions/checkout@v4.1.1

  #     - name: Setup Terraform with specified version on the runner
  #       uses: hashicorp/setup-terraform@v3
  #       with:
  #         cli_config_credentials_token: ${{ secrets.TF_API_TOKEN }}

  #     - name: Terraform get infrastructure outputs
  #       id: get-output
  #       working-directory: test_infra/
  #       env:
  #         TF_WORKSPACE: ${{ format('infra-{0}', env.environment) }}
  #       run: |
  #         terraform init > .nothing
  #         if terraform output > infra_outputs_file 2>.err;then
  #         echo "get output success."
  #         cat infra_outputs_file
  #         if grep -qE "(No outputs found)" infra_outputs_file;then
  #         echo "cluster_built=false" >> $GITHUB_OUTPUT
  #         echo "infra not built"
  #         else
  #         echo "cluster_built=true" >> $GITHUB_OUTPUT
  #         echo "infra built"
  #         echo 'infra_outputs<<EOF' >> $GITHUB_OUTPUT
  #         cat infra_outputs_file >> $GITHUB_OUTPUT
  #         echo 'EOF' >> $GITHUB_OUTPUT
  #         fi
  #         else
  #         echo "get output error."
  #         echo "cluster_built=false" >> $GITHUB_OUTPUT
  #         echo "infra not built"
  #         fi

  #     - name: Terraform plan for application deployment
  #       id: plan
  #       if: ${{ steps.get-output.outputs.cluster_built=='true' }}
  #       working-directory: test_app/
  #       env:
  #         TF_WORKSPACE: ${{ format('app-{0}', env.environment) }}
  #         image_path: test_app/image/
  #         chart_path: test_app/chart/
  #       run: |
  #         echo '${{ steps.get-output.outputs.infra_outputs }}' > terraform.tfvars
  #         if grep -qE "[^|\s]$image_path/" <<< "${{ needs.Get-changedfile.outputs.files }}";then
  #         echo "image_tag = \"changed\"" >> terraform.tfvars
  #         echo "image_tag will change"
  #         elif grep -qE "[^|\s]$chart_path/" <<< "${{ needs.Get-changedfile.outputs.files }}";then
  #         echo "chart_version = \"changed\"" >> terraform.tfvars
  #         echo "chart_version will change"
  #         else
  #         echo "image and chart not change"
  #         fi
  #         terraform init > .nothing
  #         terraform plan > plan_output
  #         url=$(grep '^To view this run in a browser, visit:' -A1 plan_output | grep -v '^To view this run in a browser, visit:' | tr -d '\012\015')
  #         sm=$(grep -E '^(Plan:|No changes.)' plan_output | tr -d '\012\015')
  #         echo "run_link=$url" >> $GITHUB_OUTPUT
  #         echo "summary=$sm" >> $GITHUB_OUTPUT
  #         echo "Run link: $url"
  #         echo "Summary: $sm"

  #     - name: Write pull request comment
  #       uses: actions/github-script@v7
  #       with:
  #         github-token: ${{ secrets.GITHUB_TOKEN }}
  #         script: |
  #           var output = ``
  #           if (${{ steps.get-output.outputs.cluster_built=='true' }}) {
  #           output = `#### Plan for application deployment...
  #             #### Run-link: ${{ steps.plan.outputs.run_link }}
  #             #### Summary: \`${{ steps.plan.outputs.summary }}\``;
  #           } else {
  #             output = `### Cluster has not been built`
  #           }
  #           github.rest.issues.createComment({
  #           issue_number: context.issue.number,
  #           owner: context.repo.owner,
  #           repo: context.repo.repo,
  #           body: output
  #           })
  
  # Test-chart:
  #   runs-on: ubuntu-latest
  #   steps:
  #     - name: Checkout
  #       uses: actions/checkout@v3
  #       with:
  #         fetch-depth: 0

  #     - name: Set up Helm
  #       uses: azure/setup-helm@v4.2.0
  #       with:
  #         version: v3.14.4

  #     - uses: actions/setup-python@v5
  #       with:
  #         python-version: '3.x'
  #         check-latest: true

  #     - name: Set up chart-testing
  #       uses: helm/chart-testing-action@v2.6.1

  #     - name: Run chart-testing (list-changed)
  #       id: list-changed
  #       run: |
  #         changed=$(ct list-changed --config ct.yaml --target-branch $branch)
  #         if [[ -n "$changed" ]]; then
  #           echo "changed=true" >> "$GITHUB_OUTPUT"
  #         fi

  #     - name: Run chart-testing (lint)
  #       if: steps.list-changed.outputs.changed == 'true'
  #       run: ct lint --config ct.yaml --target-branch $branch

  #     - name: Create kind cluster
  #       if: steps.list-changed.outputs.changed == 'true'
  #       uses: helm/kind-action@v1.10.0
      
  #     - name: Build Docker image
  #       run: |
  #         docker build -t tmp:tmp images/myimage/

  #     - name: Load Docker image to kind cluster
  #       run: |
  #         kind load docker-image tmp:tmp --name chart-testing

  #     - name: Run chart-testing (install)
  #       if: steps.list-changed.outputs.changed == 'true'
  #       run: ct install --config ct.yaml --target-branch $branch
    
  # Test-image:
  #   runs-on: ubuntu-latest
  #   defaults:
  #     run:
  #       working-directory: "./images/myimage/"

  #   strategy:
  #     matrix:
  #       node: [ 16, 18, 20 ]
  #   name: Node ${{ matrix.node }} sample

  #   steps:
  #     - uses: actions/checkout@v4.1.1

  #     - name: Set up Node.js
  #       uses: actions/setup-node@v4
  #       with:
  #         node-version: ${{ matrix.node }} 

  #     - name: Install dependencies
  #       run: npm ci

  #     - name: Unit test
  #       run: npm run test