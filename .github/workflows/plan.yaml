name: Terraform
run-name: ${{ github.actor }} is testing ðŸš€

on:
  push:
    branches:
      - main
      - dev
    # paths:
    #   - 'infrastructure/**'

env:
  CONFIG_DIRECTORY: "./infrastructure/"
  TF_CLOUD_ORGANIZATION: ${{ secrets.TF_CLOUD_ORGANIZATION }}
  TF_WORKSPACE: ${{ secrets.TF_WORKSPACE }}
  TF_API_TOKEN: ${{ secrets.TF_API_TOKEN }}
  AWS_ACCESS_KEY_ID: ${{ secrets.AWS_ACCESS_KEY_ID }}
  AWS_SECRET_ACCESS_KEY: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
  AWS_ROLE_TO_ASSUME: ${{ secrets.AWS_ROLE_TO_ASSUME }}

jobs:
  Terraform:
    name: "Terraform Plan"
    runs-on: ubuntu-latest
    steps:
      - uses: kvrhdn/tfe-run@v1
        with:
          # Token used to communicate with the Terraform Cloud API. Must be a user or
          # team api token.
          token: ${{ env.TF_API_TOKEN }}
      
          # Name of the organization on Terraform Cloud. Defaults to the GitHub
          # organization name.
          organization: ${{ env.TF_CLOUD_ORGANIZATION }}
      
          # Name of the workspace on Terraform Cloud.
          workspace: ${{ env.TF_WORKSPACE }}
      
          # Optional message to use as name of the run.
          message: |
            Run triggered using tfe-run (commit: ${{ github.SHA }})
      
          # The directory that is uploaded to Terraform Cloud/Enterprise, defaults
          # to the repository root. Respsects .terraformignore. Note: this is
          # prefixed to the "Terraform Working Directory" in the remote workspace
          # settings.
          directory: ${{ env.CONFIG_DIRECTORY }}
      
          # The type of run, allowed options are 'plan', 'apply' and 'destroy'.
          type: plan

          # Whether we should wait for the plan or run to be applied. This will block
          # until the run is finished.
          wait-for-completion: true

      
        # Optionally, assign this step an ID so you can refer to the outputs from the
        # action with ${{ steps.<id>.outputs.<output variable> }}
        id: tfe-run